# Copyright 2024 Google LLC
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

steps:
  # Step 1: Deploy the Toolbox service from a public image and capture its URL
  - id: "Deploy Toolbox Service"
    name: "gcr.io/cloud-builders/gcloud:latest"
    entrypoint: bash
    args:
      - "-c"
      - |
        gcloud run deploy ${_TOOLBOX_SERVICE} \
          --image "us-central1-docker.pkg.dev/cloud-llm-aux-dev/tool-orch-public/toolbox:latest" \
          --region ${_REGION} \
          --no-allow-unauthenticated \
          --set-env-vars "TOOLS_FILE=/app/tools.json" \
          --set-secrets="/app/tools.json=projects/706535509072/secrets/toolbox-tools:latest"

        # Capture the URL of the newly deployed Toolbox service and save it for the next step.
        gcloud run services describe ${_TOOLBOX_SERVICE} --region ${_REGION} --format 'value(status.url)' > /workspace/toolbox_url.txt
        echo "Successfully deployed Toolbox Service at: $$(cat /workspace/toolbox_url.txt)"

  # Step 2: Deploy the main Frontend service with the dynamic Toolbox URL
  - id: "Deploy Frontend Service"
    name: "gcr.io/cloud-builders/gcloud:latest"
    script: |
        #!/usr/bin/env bash
        # Read the Toolbox URL captured in the previous step
        export TOOLBOX_URL=$(cat /workspace/toolbox_url.txt)

        # Deploy the main service and inject the dynamic TOOLBOX_URL
        gcloud run deploy ${_SERVICE} \
          --source . \
          --region ${_REGION} \
          --no-allow-unauthenticated \
          --update-env-vars TOOLBOX_URL=$$TOOLBOX_URL

  # Step 3: Test the running Frontend service
  - id: "Test Frontend"
    name: "gcr.io/cloud-builders/gcloud:latest"
    entrypoint: /bin/bash
    env: # Set env var expected by app
    args:
      - "-c"
      - |
        export URL=$(gcloud run services describe ${_SERVICE} --region ${_REGION} --format 'value(status.url)')
        export ID_TOKEN=$(gcloud auth print-identity-token --audiences $$URL)
        export TOOLBOX_URL=${_TOOLBOX_URL}

        # Test `/` route
        curl -c cookies.txt -si --fail --show-error -H "Authorization: Bearer $$ID_TOKEN" $$URL

        # Test `/chat` route should fail
        msg=$(curl -si --show-error \
          -X POST \
          -H "Authorization: Bearer $$ID_TOKEN" \
          -H 'Content-Type: application/json' \
          -d '{"prompt":"How can you help me?"}' \
          $$URL/chat)

        if grep -q "400" <<< "$msg"; then
          echo "Chat Handler Test: PASSED"
        else
          echo "Chat Handler Test: FAILED"
          echo $msg && exit 1
        fi

        # Test `/chat` route
        curl -b cookies.txt -si --fail --show-error \
          -X POST \
          -H "Authorization: Bearer $$ID_TOKEN" \
          -H 'Content-Type: application/json' \
          -d '{"prompt":"How can you help me?"}' \
          $$URL/chat

  # Step 4: Cleanup and delete all deployed resources
  - id: "Delete image and services"
    name: "gcr.io/cloud-builders/gcloud"
    script: |
        #!/usr/bin/env bash
        # Delete the main service's source image
        gcloud artifacts docker images delete $_GCR_HOSTNAME/$PROJECT_ID/cloud-run-source-deploy/$_SERVICE --quiet

        # Delete the main service
        gcloud run services delete ${_SERVICE} --region ${_REGION} --quiet

        # Delete the toolbox service
        gcloud run services delete ${_TOOLBOX_SERVICE} --region ${_REGION} --quiet

serviceAccount: "projects/$PROJECT_ID/serviceAccounts/548341735270-compute@developer.gserviceaccount.com" # Necessary for ID token creation
options:
  automapSubstitutions: true
  logging: CLOUD_LOGGING_ONLY # Necessary for custom service account
  dynamic_substitutions: true

substitutions:
  _GCR_HOSTNAME: ${_REGION}-docker.pkg.dev
  _SERVICE: demo-service-${BUILD_ID}
  _REGION: us-central1
  _TOOLBOX_SERVICE: toolbox-service-${BUILD_ID}
